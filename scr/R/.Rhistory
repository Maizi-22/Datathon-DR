survival.data$death[is.na(survival.data$deathtime)] <- 0
# remove timestamp data
basic_info <- basic_info[, names(basic_info) %in% c('subject_id', 'admittime', 'dischtime', 'deathtime', 'first_icu_intime', 'last_icu_outtime', 'diuretic_resis_date', 'diuretic_resis_date', 'maxdose_date', 'get_better_date', 'rrt_charttime') == FALSE]
# convert binary variable to factor
basic_info$gender[which(basic_info$gender == 'F')] <- 0
basic_info$gender[which(basic_info$gender == 'M')] <- 1
basic_info[, c(3, 4, 7, 8, 10)] <- lapply(basic_info[, c(3, 4, 7, 8, 10)], as.factor)
# drug use data
druguse <- read_csv("~/Documents/python-projects/Datathon-DR/data/data0111/druguse.csv")[, -1]
druguse[, c(2:18)] <- lapply(druguse[, c(2:18)], as.factor)
# nosocomial data by caoyang
nosocomial <- read_csv("~/Documents/python-projects/Datathon-DR/data/data0111/nosocomial.csv")[, -c(1, 3:5)]
nosocomial[is.na(nosocomial)] <- 0
nosocomial[, c(2:4)] <- lapply(nosocomial[, c(2:4)], as.factor)
# fluid load data
fluidload <- read_csv("~/Documents/python-projects/Datathon-DR/data/data0111/fluidload.csv")[, -1]
# vital data
vital <- read_csv("~/Documents/python-projects/Datathon-DR/data/data0111/vital.csv")[, -1]
# lab test
lab <- read_csv("~/Documents/python-projects/Datathon-DR/data/data0111/lab.csv")[, -c(14, 27, 40)]
lab[, c(1:49)] <- lapply(lab[, c(1:49)], as.numeric)
data.raw <- merge(basic_info, druguse, by.x = 'hadm_id', by.y = 'hadm_id', all.x = TRUE)
data.raw <- merge(data.raw, fluidload, by.x = 'hadm_id', by.y = 'hadm_id', all.x = TRUE)
data.raw <- merge(data.raw, nosocomial, by.x = 'hadm_id', by.y = 'hadm_id', all.x = TRUE)
data.raw <- merge(data.raw, vital, by.x = 'hadm_id', by.y = 'hadm_id', all.x = TRUE)
data.raw <- merge(data.raw, lab, by.x = 'hadm_id', by.y = 'hadm_id', all.x = TRUE)
data.raw <- merge(data.raw, survival.data, by.x = 'hadm_id', by.y = 'hadm_id', all.x = TRUE)
# write.csv(data.raw, '~/Desktop/survival.csv')
# final dataset
# remove cvp, urine acid, bnp and base excess(not adm)
data.std <- data.raw[, names(data.raw) %in% c('cvp_adm', 'cvp_dr', 'cvp_therapy', 'cvp_dis', 'urine_acid_adm', 'urine_acid_dr', 'urine_acid_therapy', 'urine_acid_dis', 'bnp_adm', 'bnp_dr', 'bnp_therapy', 'bnp_dis', 'base_excess_dr', 'base_excess_therapy', 'base_excess_dis', 'diuretic_drg_start') == FALSE]
data.std$readmit30 <- ifelse(data.std$readmit_gap <= 30, 1, 0)
data.std$readmit30 <- ifelse(is.na(data.std$readmit_gap), 0, data.std$readmit30)
data.std$readmit30 <- as.factor(data.std$readmit30 )
data.std$readmit90 <- ifelse(data.std$readmit_gap <= 90, 1, 0)
data.std$readmit90 <- ifelse(is.na(data.std$readmit_gap), 0, data.std$readmit90)
data.std$readmit90 <- as.factor(data.std$readmit90 )
View(data.std)
train.data <- data.std[sample(1046, 785), ]
valid.data <- anti_join(data.std, train.data)
# save data
write.csv(train.data, '~/Documents/python-projects/Datathon-DR/data/processed/train_data.csv')
write.csv(valid.data, '~/Documents/python-projects/Datathon-DR/data/processed/valid_data.csv')
# create baseline summary
library(tableone)
catvars <- c("age", "gender", "height", "weight_adm","bmi", "bbr", "inotropes_vasopressor", "acei", "mra", "vasodilator", "ischemic_heart_disease", "cardiomyopathies", "valvular_disease", "atrial_fibrilation", "hyperlipidemia", "hypertension", "diabetes", "sleep_disordered_breathing", "renal_failure", "anemia", "infection", "alcohol_abuse", "hr_adm", "sbp_adm", "dbp_adm", "spo2_adm", "tem_adm", "gfr_adm", "bnp_adm", "base_excess_adm", "hco3_adm", "ph_adm", "urine_acid_adm", "hemoglobin_adm", "albumin_adm", "potassium_adm", "sodium_adm", "creatinine_adm", "bun_adm", 'readmit30', 'readmit90')
test.table <- CreateTableOne(vars=catvars, strata = "rrt", data = data.std)
a <- print(test.table, quote = TRUE)[, -4]
g1 <- paste('Non RRT (n=', a[1,1], ')')
g2 <- paste('RRT (n=', a[1,2], ')')
colnames(a) <- c(g1, g2, 'p-value')
a <- a[-1, ]
# write.csv(a, '~/Documents/python-projects/Datathon-DR/report/baseline_analysis.csv')
test.table <- CreateTableOne(vars=catvars, strata = "rrt", data = valid.data)
b <- print(test.table, quote = TRUE)[, -4]
g1 <- paste('Non RRT (n=', b[1,1], ')')
g2 <- paste('RRT (n=', b[1,2], ')')
colnames(b) <- c(g1, g2, 'p-value')
b <- b[-1, ]
# write.csv(b, '~/Documents/python-projects/Datathon-DR/report/baseline_analysis_valid.csv')
write.csv(a, '~/Documents/python-projects/Datathon-DR/report/baseline_analysis_entire.csv')
write.csv(b, '~/Documents/python-projects/Datathon-DR/report/baseline_analysis_valid.csv')
catvars <- c("los_hos", "los_icu", "hospital_expire_flag", "add_drug_therapy", "change_drug_therapy", "fluid_overload_to_rrt", "daily_fluid_overload_to_rrt", "urine_output_to_rrt", "daily_uo_to_rrt", "total_input_to_discharge", "total_output_to_discharge", "fluid_overload_to_dis", "urine_output_to_dis")
# entire cohort
test.table <- CreateTableOne(vars=catvars, strata = "rrt", data = data.std)
a <- print(test.table, quote = TRUE)[, -4]
g1 <- paste('Non RRT (n=', a[1,1], ')')
g2 <- paste('RRT (n=', a[1,2], ')')
colnames(a) <- c(g1, g2, 'p-value')
a <- a[-1, ]
write.csv(a, '~/Documents/python-projects/Datathon-DR/report/outcomevariable_summary_entire.csv')
test.table <- CreateTableOne(vars=catvars, strata = "rrt", data = valid.data)
b <- print(test.table, quote = TRUE)[, -4]
g1 <- paste('Non RRT (n=', b[1,1], ')')
g2 <- paste('RRT (n=', b[1,2], ')')
colnames(b) <- c(g1, g2, 'p-value')
b <- b[-1, ]
write.csv(b, '~/Documents/python-projects/Datathon-DR/report/outcomevariable_summary_valid.csv')
# table(data.std$change_drug_therapy)
# table(data.std$add_drug_therapy)
# table(data.std$rrt)
x <- c(169, 561, 394, 93)
labels <- c('Change drug\n 169(20.5%)', 'Add drug\n 561(68.2%)', 'Other\n 394(32.4%)', 'Dialysis\n 93(11.3%)')
pie(x, labels, main = 'Therapy applied in diuretic resist patients')
# table(data.std$hospital_expire_flag)
x <- c(247, 970)
labels <- c('Dead\n 247(20.30%)', 'Survived\n 970(79.7%)')
pie(x, labels, main = 'Death percentage in diuretic resist patients')
# remove time3 related variables: noso...,
mydata <- data.std[, names(data.std) %in% c('nosocomial_hypoproteinemia', 'nosocomial_anemia', 'nosocomial_hyponatremia', 'total_drug_unit', 'diure_resis_to_rrt_day', 'diure_drug_use_to_rrt_day', 'therapy_to_dis_day') == FALSE]
summary(mydata)
mydata <- DataInterp(mydata)
summary(mydata)
library(glmnet)
# lasso regression
# =================
data <- mydata
y <- as.numeric(as.character(data$rrt))
# remove outcome variables
x <- data[, names(data) %in% c('hadm_id', 'los_icu', 'los_hos', 'hospital_expire_flag') == FALSE]
# only include variables at admission and DR
x <- data[, names(data) %in% c('age', 'gender', 'add_drug_therapy', 'change_drug_therapy', 'height', 'weight_adm', 'weight_after_dr',
'bbr', 'inotropes_vasopressor', 'acei', 'mra', 'vasodilator',
'ischemic_heart_disease', 'cardiomyopathies', 'valvular_disease', 'atrial_fibrilation', 'hyperlipidemia', 'hypertension', 'diabetes', 'sleep_disordered_breathing', 'renal_failure', 'anemia', 'infection', 'alcohol_abuse',
'hr_adm', 'hr_dr', 'sbp_adm', 'sbp_dr', 'dbp_adm', 'dbp_dr', 'spo2_adm', 'spo2_dr', 'tem_adm', 'tem_dr',
'base_excess_adm', 'bun_adm', 'bun_dr', 'creatinine_adm', 'creatinine_dr', 'sodium_adm', 'sodium_dr', 'potassium_adm', 'potassium_dr', 'hemoglobin_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'gfr_adm', 'gfr_dr', 'ph_adm', 'ph_dr', 'albumin_adm', 'albumin_dr')]
x[, ] <- lapply(x[, ], as.character)
x[, ] <- lapply(x[, ], as.numeric)
x <- as.matrix(x[, ])
set.seed(999)
fit.lasso <- cv.glmnet(x, y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
plot(fit.lasso)
fit.lasso$lambda.min
fit.lasso$lambda.1se
coef(fit.lasso, s=fit.lasso$lambda.min)
coef(fit.lasso, s=fit.lasso$lambda.min)
data <- mydata
data.model <- data[, names(data) %in% c('age', 'gender', 'add_drug_therapy', 'change_drug_therapy', 'height', 'weight_adm', 'weight_after_dr',
'bbr', 'inotropes_vasopressor', 'acei', 'mra', 'vasodilator',
'ischemic_heart_disease', 'cardiomyopathies', 'valvular_disease', 'atrial_fibrilation', 'hyperlipidemia', 'hypertension', 'diabetes', 'sleep_disordered_breathing', 'renal_failure', 'anemia', 'infection', 'alcohol_abuse',
'hr_adm', 'hr_dr', 'sbp_adm', 'sbp_dr', 'dbp_adm', 'dbp_dr', 'spo2_adm', 'spo2_dr', 'tem_adm', 'tem_dr',
'base_excess_adm', 'bun_adm', 'bun_dr', 'creatinine_adm', 'creatinine_dr', 'sodium_adm', 'sodium_dr', 'potassium_adm', 'potassium_dr', 'hemoglobin_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'gfr_adm', 'gfr_dr', 'ph_adm', 'ph_dr', 'albumin_adm', 'albumin_dr', 'rrt')]
# remove variables in lasso regression
data.model <- data[, names(data) %in% c('change_drug_therapy', 'weight_adm', 'weight_after_dr', 'bbr', 'vasodilator', 'valvular_disease', 'hypertension', 'sleep_disordered_breathing', 'sbp_dr', 'dbp_adm', 'tem_adm', 'creatinine_adm', 'sodium_dr', 'potassium_adm', 'hco3_adm') == FALSE]
y <- as.numeric(as.character(data.model$rrt))
x <- data.model[, names(data.model) %in% c('rrt') == FALSE]
x[, ] <- lapply(x[, ], as.character)
x[, ] <- lapply(x[, ], as.numeric)
x <- as.matrix(x[, ])
set.seed(999)
fit.lasso <- cv.glmnet(x, y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
plot(fit.lasso)
fit.lasso$lambda.min
fit.lasso$lambda.1se
coef(fit.lasso, s=fit.lasso$lambda.min)
coef(fit.lasso, s=fit.lasso$lambda.min)
data <- mydata
data.model <- data[, names(data) %in% c('age', 'gender', 'add_drug_therapy', 'change_drug_therapy', 'height', 'weight_adm', 'weight_after_dr',
'bbr', 'inotropes_vasopressor', 'acei', 'mra', 'vasodilator',
'ischemic_heart_disease', 'cardiomyopathies', 'valvular_disease', 'atrial_fibrilation', 'hyperlipidemia', 'hypertension', 'diabetes', 'sleep_disordered_breathing', 'renal_failure', 'anemia', 'infection', 'alcohol_abuse',
'hr_adm', 'hr_dr', 'sbp_adm', 'sbp_dr', 'dbp_adm', 'dbp_dr', 'spo2_adm', 'spo2_dr', 'tem_adm', 'tem_dr',
'base_excess_adm', 'bun_adm', 'bun_dr', 'creatinine_adm', 'creatinine_dr', 'sodium_adm', 'sodium_dr', 'potassium_adm', 'potassium_dr', 'hemoglobin_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'gfr_adm', 'gfr_dr', 'ph_adm', 'ph_dr', 'albumin_adm', 'albumin_dr', 'rrt')]
data.model <- data[, names(data) %in% c('age', 'gender', 'add_drug_therapy', 'change_drug_therapy', 'height', 'weight_adm', 'weight_after_dr',
'bbr', 'inotropes_vasopressor', 'acei', 'mra', 'vasodilator',
'ischemic_heart_disease', 'cardiomyopathies', 'valvular_disease', 'atrial_fibrilation', 'hyperlipidemia', 'hypertension', 'diabetes', 'sleep_disordered_breathing', 'renal_failure', 'anemia', 'infection', 'alcohol_abuse',
'hr_adm', 'hr_dr', 'sbp_adm', 'sbp_dr', 'dbp_adm', 'dbp_dr', 'spo2_adm', 'spo2_dr', 'tem_adm', 'tem_dr',
'base_excess_adm', 'bun_adm', 'bun_dr', 'creatinine_adm', 'creatinine_dr', 'sodium_adm', 'sodium_dr', 'potassium_adm', 'potassium_dr', 'hemoglobin_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'gfr_adm', 'gfr_dr', 'ph_adm', 'ph_dr', 'albumin_adm', 'albumin_dr', 'rrt')]
# remove variables in lasso regression
data.model <- data.model[, names(data.model) %in% c('change_drug_therapy', 'weight_adm', 'weight_after_dr', 'bbr', 'vasodilator', 'valvular_disease', 'hypertension', 'sleep_disordered_breathing', 'sbp_dr', 'dbp_adm', 'tem_adm', 'creatinine_adm', 'sodium_dr', 'potassium_adm', 'hco3_adm') == FALSE]
y <- as.numeric(as.character(data.model$rrt))
x <- data.model[, names(data.model) %in% c('rrt') == FALSE]
x[, ] <- lapply(x[, ], as.character)
x[, ] <- lapply(x[, ], as.numeric)
x <- as.matrix(x[, ])
set.seed(999)
fit.lasso <- cv.glmnet(x, y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
plot(fit.lasso)
fit.lasso$lambda.min
fit.lasso$lambda.1se
coef(fit.lasso, s=fit.lasso$lambda.min)
model1 <- glm(rrt ~ .
, family = binomial(link = 'logit')
, data = data.model)
summary(model1)
model2 <- step(model1)
summary(model2)
summary(model2)
a <- cbind(exp(coef(model2)), exp(confint(model2)), p_value = coef(summary(model2))[, 4])
b <- round(a, 5)
b <- cbind(paste(b[, 1], '(', b[, 2], ',', b[, 3], ')'), b[, 4])
b <- as.data.frame(b)
rownames(b) <- rownames(a)
colnames(b) <- c('OR (95%CI)', 'p value')
b
write.csv(b, '~/Documents/python-projects/Datathon-DR/report/model_output_first_2_timestamp.csv')
source('~/Documents/python-projects/Datathon-DR/scr/R/help.R')
train.data <- train.data[, names(train.data) %in% c('age', 'gender', 'add_drug_therapy', 'change_drug_therapy', 'height', 'weight_adm', 'weight_after_dr',
'bbr', 'inotropes_vasopressor', 'acei', 'mra', 'vasodilator',
'ischemic_heart_disease', 'cardiomyopathies', 'valvular_disease', 'atrial_fibrilation', 'hyperlipidemia', 'hypertension', 'diabetes', 'sleep_disordered_breathing', 'renal_failure', 'anemia', 'infection', 'alcohol_abuse',
'hr_adm', 'hr_dr', 'sbp_adm', 'sbp_dr', 'dbp_adm', 'dbp_dr', 'spo2_adm', 'spo2_dr', 'tem_adm', 'tem_dr',
'base_excess_adm', 'bun_adm', 'bun_dr', 'creatinine_adm', 'creatinine_dr', 'sodium_adm', 'sodium_dr', 'potassium_adm', 'potassium_dr', 'hemoglobin_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'gfr_adm', 'gfr_dr', 'ph_adm', 'ph_dr', 'albumin_adm', 'albumin_dr', 'rrt')]
valid.data <- valid.data[, names(valid.data) %in% c('age', 'gender', 'add_drug_therapy', 'change_drug_therapy', 'height', 'weight_adm', 'weight_after_dr',
'bbr', 'inotropes_vasopressor', 'acei', 'mra', 'vasodilator',
'ischemic_heart_disease', 'cardiomyopathies', 'valvular_disease', 'atrial_fibrilation', 'hyperlipidemia', 'hypertension', 'diabetes', 'sleep_disordered_breathing', 'renal_failure', 'anemia', 'infection', 'alcohol_abuse',
'hr_adm', 'hr_dr', 'sbp_adm', 'sbp_dr', 'dbp_adm', 'dbp_dr', 'spo2_adm', 'spo2_dr', 'tem_adm', 'tem_dr',
'base_excess_adm', 'bun_adm', 'bun_dr', 'creatinine_adm', 'creatinine_dr', 'sodium_adm', 'sodium_dr', 'potassium_adm', 'potassium_dr', 'hemoglobin_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'gfr_adm', 'gfr_dr', 'ph_adm', 'ph_dr', 'albumin_adm', 'albumin_dr', 'rrt')]
library(glmnet)
# lasso regression
# =================
data <- train.data
data <- DataInterp(data)
# load data
library(readr)
train.data <- read.csv('~/Documents/python-projects/Datathon-DR/data/processed/train_data.csv')[, -1]
valid.data <- read.csv('~/Documents/python-projects/Datathon-DR/data/processed/valid_data.csv')[, -1]
# remove variables related to the third timestamp
train.data <- train.data[, names(train.data) %in% c('hadm_id', 'age', 'gender', 'add_drug_therapy', 'change_drug_therapy', 'height', 'weight_adm', 'weight_after_dr',
'bbr', 'inotropes_vasopressor', 'acei', 'mra', 'vasodilator',
'ischemic_heart_disease', 'cardiomyopathies', 'valvular_disease', 'atrial_fibrilation', 'hyperlipidemia', 'hypertension', 'diabetes', 'sleep_disordered_breathing', 'renal_failure', 'anemia', 'infection', 'alcohol_abuse',
'hr_adm', 'hr_dr', 'sbp_adm', 'sbp_dr', 'dbp_adm', 'dbp_dr', 'spo2_adm', 'spo2_dr', 'tem_adm', 'tem_dr',
'base_excess_adm', 'bun_adm', 'bun_dr', 'creatinine_adm', 'creatinine_dr', 'sodium_adm', 'sodium_dr', 'potassium_adm', 'potassium_dr', 'hemoglobin_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'gfr_adm', 'gfr_dr', 'ph_adm', 'ph_dr', 'albumin_adm', 'albumin_dr', 'rrt')]
valid.data <- valid.data[, names(valid.data) %in% c('hadm_id', 'age', 'gender', 'add_drug_therapy', 'change_drug_therapy', 'height', 'weight_adm', 'weight_after_dr',
'bbr', 'inotropes_vasopressor', 'acei', 'mra', 'vasodilator',
'ischemic_heart_disease', 'cardiomyopathies', 'valvular_disease', 'atrial_fibrilation', 'hyperlipidemia', 'hypertension', 'diabetes', 'sleep_disordered_breathing', 'renal_failure', 'anemia', 'infection', 'alcohol_abuse',
'hr_adm', 'hr_dr', 'sbp_adm', 'sbp_dr', 'dbp_adm', 'dbp_dr', 'spo2_adm', 'spo2_dr', 'tem_adm', 'tem_dr',
'base_excess_adm', 'bun_adm', 'bun_dr', 'creatinine_adm', 'creatinine_dr', 'sodium_adm', 'sodium_dr', 'potassium_adm', 'potassium_dr', 'hemoglobin_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'gfr_adm', 'gfr_dr', 'ph_adm', 'ph_dr', 'albumin_adm', 'albumin_dr', 'rrt')]
data <- train.data
data <- DataInterp(data)
train.data <- read.csv('~/Documents/python-projects/Datathon-DR/data/processed/train_data.csv')[, -1]
valid.data <- read.csv('~/Documents/python-projects/Datathon-DR/data/processed/valid_data.csv')[, -1]
# remove variables related to the third timestamp
train.data <- DataInterp(train.data)
train.data <- train.data[, names(train.data) %in% c('age', 'gender', 'add_drug_therapy', 'change_drug_therapy', 'height', 'weight_adm', 'weight_after_dr',
'bbr', 'inotropes_vasopressor', 'acei', 'mra', 'vasodilator',
'ischemic_heart_disease', 'cardiomyopathies', 'valvular_disease', 'atrial_fibrilation', 'hyperlipidemia', 'hypertension', 'diabetes', 'sleep_disordered_breathing', 'renal_failure', 'anemia', 'infection', 'alcohol_abuse',
'hr_adm', 'hr_dr', 'sbp_adm', 'sbp_dr', 'dbp_adm', 'dbp_dr', 'spo2_adm', 'spo2_dr', 'tem_adm', 'tem_dr',
'base_excess_adm', 'bun_adm', 'bun_dr', 'creatinine_adm', 'creatinine_dr', 'sodium_adm', 'sodium_dr', 'potassium_adm', 'potassium_dr', 'hemoglobin_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'gfr_adm', 'gfr_dr', 'ph_adm', 'ph_dr', 'albumin_adm', 'albumin_dr', 'rrt')]
valid.data <- DataInterp(valid.data)
valid.data <- valid.data[, names(valid.data) %in% c('hadm_id', 'age', 'gender', 'add_drug_therapy', 'change_drug_therapy', 'height', 'weight_adm', 'weight_after_dr',
'bbr', 'inotropes_vasopressor', 'acei', 'mra', 'vasodilator',
'ischemic_heart_disease', 'cardiomyopathies', 'valvular_disease', 'atrial_fibrilation', 'hyperlipidemia', 'hypertension', 'diabetes', 'sleep_disordered_breathing', 'renal_failure', 'anemia', 'infection', 'alcohol_abuse',
'hr_adm', 'hr_dr', 'sbp_adm', 'sbp_dr', 'dbp_adm', 'dbp_dr', 'spo2_adm', 'spo2_dr', 'tem_adm', 'tem_dr',
'base_excess_adm', 'bun_adm', 'bun_dr', 'creatinine_adm', 'creatinine_dr', 'sodium_adm', 'sodium_dr', 'potassium_adm', 'potassium_dr', 'hemoglobin_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'gfr_adm', 'gfr_dr', 'ph_adm', 'ph_dr', 'albumin_adm', 'albumin_dr', 'rrt')]
valid.data <- valid.data[, names(valid.data) %in% c('age', 'gender', 'add_drug_therapy', 'change_drug_therapy', 'height', 'weight_adm', 'weight_after_dr',
'bbr', 'inotropes_vasopressor', 'acei', 'mra', 'vasodilator',
'ischemic_heart_disease', 'cardiomyopathies', 'valvular_disease', 'atrial_fibrilation', 'hyperlipidemia', 'hypertension', 'diabetes', 'sleep_disordered_breathing', 'renal_failure', 'anemia', 'infection', 'alcohol_abuse',
'hr_adm', 'hr_dr', 'sbp_adm', 'sbp_dr', 'dbp_adm', 'dbp_dr', 'spo2_adm', 'spo2_dr', 'tem_adm', 'tem_dr',
'base_excess_adm', 'bun_adm', 'bun_dr', 'creatinine_adm', 'creatinine_dr', 'sodium_adm', 'sodium_dr', 'potassium_adm', 'potassium_dr', 'hemoglobin_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'gfr_adm', 'gfr_dr', 'ph_adm', 'ph_dr', 'albumin_adm', 'albumin_dr', 'rrt')]
library(glmnet)
# lasso regression
# =================
data <- train.data
y <- as.numeric(as.character(data$rrt))
# remove outcome variables
x <- data[, names(data) %in% c('hadm_id', 'los_icu', 'los_hos', 'hospital_expire_flag') == FALSE]
# only include variables at admission and DR
x <- data[, names(data) %in% c('age', 'gender', 'add_drug_therapy', 'change_drug_therapy', 'height', 'weight_adm', 'weight_after_dr',
'bbr', 'inotropes_vasopressor', 'acei', 'mra', 'vasodilator',
'ischemic_heart_disease', 'cardiomyopathies', 'valvular_disease', 'atrial_fibrilation', 'hyperlipidemia', 'hypertension', 'diabetes', 'sleep_disordered_breathing', 'renal_failure', 'anemia', 'infection', 'alcohol_abuse',
'hr_adm', 'hr_dr', 'sbp_adm', 'sbp_dr', 'dbp_adm', 'dbp_dr', 'spo2_adm', 'spo2_dr', 'tem_adm', 'tem_dr',
'base_excess_adm', 'bun_adm', 'bun_dr', 'creatinine_adm', 'creatinine_dr', 'sodium_adm', 'sodium_dr', 'potassium_adm', 'potassium_dr', 'hemoglobin_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'gfr_adm', 'gfr_dr', 'ph_adm', 'ph_dr', 'albumin_adm', 'albumin_dr')]
x[, ] <- lapply(x[, ], as.character)
x[, ] <- lapply(x[, ], as.numeric)
x <- as.matrix(x[, ])
set.seed(999)
fit.lasso <- cv.glmnet(x, y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
plot(fit.lasso)
fit.lasso$lambda.min
fit.lasso$lambda.1se
coef(fit.lasso, s=fit.lasso$lambda.min)
coef(fit.lasso, s=fit.lasso$lambda.min)
# remove variables:
# 'gender', 'add_drug_therapy', 'height', 'weight_adm', 'weight_after_dr', 'bbr', 'vasodilator', 'ischemic_heart_disease', 'hypertension', 'sbp_adm', 'sbp_dr', 'tem_adm', 'tem_dr', 'creatinine_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'ph_dr'
train.data <- train.data[, names(train.data) %in% c('gender', 'add_drug_therapy', 'height', 'weight_adm', 'weight_after_dr', 'bbr', 'vasodilator', 'ischemic_heart_disease', 'hypertension', 'sbp_adm', 'sbp_dr', 'tem_adm', 'tem_dr', 'creatinine_adm', 'hemoglobin_dr', 'hco3_adm', 'hco3_dr', 'ph_dr') == F]
library(randomForest)
library(pROC)
library(ROCR)
library(dplyr)
data.rf <- train.data
data.rf$rrt <- as.factor(data.rf$rrt)
library(caret)
set.seed(7)
folds <- createFolds(y = data.rf$rrt, k=10)
aucsum <- 0
i <- 1
View(train.data)
fold.test <- data.rf[folds[[i]], ]
fold.train <- data.rf[-folds[[i]], ]
rf <- randomForest(rrt ~ .
, data = fold.train, ntree=150, proximity=TRUE,importance=TRUE)
# importance(rf)
a <- as.data.frame(importance(rf))[, -c(1, 2)]
a$var <- rownames(a)
View(a)
impresult <- as.data.frame(colnames(train.data))
View(impresult)
impresult <- as.data.frame(a[, 3])
View(impresult)
# use 10-fold
library(caret)
set.seed(7)
folds <- createFolds(y = data.rf$rrt, k=10)
aucsum <- 0
impresult <- as.data.frame(colnames(train.data))
colnames(impresult) <- 'var'
impresult$var <- as.character(impresult$var)
for (i in 1:10){
fold.test <- data.rf[folds[[i]], ]
fold.train <- data.rf[-folds[[i]], ]
rf <- randomForest(rrt ~ .
, data = fold.train, ntree=150, proximity=TRUE,importance=TRUE)
# importance(rf)
a <- as.data.frame(importance(rf))[, -c(1, 2)]
a$var <- rownames(a)
impresult <- merge(impresult, a, by = 'var')
# varImpPlot(rf, n.var = 20, main = 'Variable importance, Random Forest')
fold.test$pred2 <- predict(rf, fold.test, type = 'prob')
rocobj1 <- plot.roc(fold.test$rrt,
fold.test$pred2[, 2],
percent=TRUE,ci=TRUE,col="#1c61b6",
print.auc=TRUE)
pred3 <- predict(rf, fold.test, type = 'prob')
z <- table(predict(rf, fold.test), fold.test$rrt)
q <- sum(diag(z))/sum(z)
aucsum <- aucsum + rocobj1$auc
}
auc.rt <- aucsum/10
impresult$meanAccuracy <- rowMeans(as.matrix(impresult[, c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)], na.rm = FALSE, dims = 1))
impresult$meanGini <- rowMeans(as.matrix(impresult[, c(3, 5, 7, 9, 11, 13, 15, 17, 19, 21)], na.rm = FALSE, dims = 1))
impresult <- impresult[order(impresult$meanAccuracy, decreasing = T), ]
a <- impresult[1:20, ]
# row.names(a) <- c('GFR after DR', 'creatinine after DR', 'SPO2 after DR', 'SPO2 at admission', 'BUN after DR', 'GFR at admission', 'creatinine at admission', 'BUN at admission', 'albumin after DR', 'potassium after DR', 'albumin at admission', 'renal failure', 'weight after DR', 'age', 'HCO3 after DR', 'SBP at admission', 'DBP at admission', 'base excess at admission', 'weight at admission', 'hemoglobin after DR')
ggplot(data = a, mapping = aes(x = reorder(row.names(a), meanAccuracy), y = meanAccuracy)) +
geom_bar(stat= 'identity') +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1), plot.margin = unit(c(1,1,1,1),"cm")) +
xlab('variable') +
ylab('Variable importance(Accuracy)')
a[, 1]
data.rf <- train.data[, names(train.data) %in% c('gfr_dr', 'creatinine_dr', "spo2_adm", "bun_dr", "spo2_dr","gfr_adm", "bun_adm", "albumin_dr","potassium_dr", "albumin_adm", "age", "dbp_dr", "hr_adm", "potassium_adm", "dbp_adm", "hr_adm", "sodium_dr", "acei", 'hr_dr', 'hyperlipidemia', 'sodium_adm', 'rrt')]
data.rf$rrt <- as.factor(data.rf$rrt)
rf <- randomForest(rrt ~ .
, data = data.rf, ntree=150, proximity=TRUE,importance=TRUE)
valid.rf <- valid.data[, names(valid.data) %in% c('gfr_dr', 'creatinine_dr', "spo2_adm", "bun_dr", "spo2_dr","gfr_adm", "bun_adm", "albumin_dr","potassium_dr", "albumin_adm", "age", "dbp_dr", "hr_adm", "potassium_adm", "dbp_adm", "hr_adm", "sodium_dr", "acei", 'hr_dr', 'hyperlipidemia', 'sodium_adm', 'rrt')]
valid.rf$rrt <- as.factor(valid.rf$rrt)
valid.rf$pred2 <- predict(rf, valid.rf, type = 'prob')
rocobj1 <- plot.roc(valid.rf$rrt,
valid.rf$pred2[, 2],
percent=TRUE,ci=TRUE,col="#1c61b6",
print.auc=TRUE)
data.rf <- train.data[, names(train.data) %in% c('age', 'spo2_adm', 'acei', 'hyperlipidemia', 'creatinine_dr', 'gfr_dr', 'albumin_dr', 'rrt')]
data.rf$rrt <- as.factor(data.rf$rrt)
# use 10-fold
library(caret)
set.seed(7)
folds <- createFolds(y = data.rf$rrt, k=10)
aucsum <- 0
impresult <- as.data.frame(colnames(train.data))
colnames(impresult) <- 'var'
impresult$var <- as.character(impresult$var)
for (i in 1:10){
fold.test <- data.rf[folds[[i]], ]
fold.train <- data.rf[-folds[[i]], ]
rf <- randomForest(rrt ~ .
, data = fold.train, ntree=200, proximity=TRUE,importance=TRUE)
# variable importance
a <- as.data.frame(importance(rf))[, -c(1, 2)]
a$var <- rownames(a)
impresult <- merge(impresult, a, by = 'var')
varImpPlot(rf, main = 'Variable importance, Random Forest')
fold.test$pred2 <- predict(rf, fold.test, type = 'prob')
rocobj1 <- plot.roc(fold.test$rrt,
fold.test$pred2[, 2],
percent=TRUE,ci=TRUE,col="#1c61b6",
print.auc=TRUE)
pred3 <- predict(rf, fold.test, type = 'prob')
z <- table(predict(rf, fold.test), fold.test$rrt)
q <- sum(diag(z))/sum(z)
aucsum <- aucsum + rocobj1$auc
}
auc.rt <- aucsum/10
data.rf <- train.data[, names(train.data) %in% c('age', 'spo2_adm', 'acei', 'hyperlipidemia', 'creatinine_dr', 'gfr_dr', 'albumin_dr', 'rrt')]
data.rf$rrt <- as.factor(data.rf$rrt)
rf <- randomForest(rrt ~ .
, data = data.rf, ntree=150, proximity=TRUE,importance=TRUE)
valid.rf <- valid.data[, names(valid.data) %in% c('age', 'spo2_adm', 'acei', 'hyperlipidemia', 'creatinine_dr', 'gfr_dr', 'albumin_dr', 'rrt')]
valid.rf$rrt <- as.factor(valid.rf$rrt)
valid.rf$pred2 <- predict(rf, valid.rf, type = 'prob')
rocobj1 <- plot.roc(valid.rf$rrt,
valid.rf$pred2[, 2],
percent=TRUE,ci=TRUE,col="#1c61b6",
print.auc=TRUE)
impresult$meanAccuracy <- rowMeans(as.matrix(impresult[, c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)], na.rm = FALSE, dims = 1))
impresult$meanGini <- rowMeans(as.matrix(impresult[, c(3, 5, 7, 9, 11, 13, 15, 17, 19, 21)], na.rm = FALSE, dims = 1))
impresult <- impresult[order(impresult$meanAccuracy, decreasing = T), ]
a <- impresult
View(a)
a[, 1]
impresult <- impresult[order(impresult$meanGini, decreasing = T), ]
a <- impresult
a[, 1]
library(randomForest)
library(pROC)
library(ROCR)
library(dplyr)
data.rf <- train.data
data.rf$rrt <- as.factor(data.rf$rrt)
# use 10-fold
library(caret)
set.seed(7)
folds <- createFolds(y = data.rf$rrt, k=10)
aucsum <- 0
impresult <- as.data.frame(colnames(train.data))
colnames(impresult) <- 'var'
impresult$var <- as.character(impresult$var)
for (i in 1:10){
fold.test <- data.rf[folds[[i]], ]
fold.train <- data.rf[-folds[[i]], ]
rf <- randomForest(rrt ~ .
, data = fold.train, ntree=150, proximity=TRUE,importance=TRUE)
# importance(rf)
a <- as.data.frame(importance(rf))[, -c(1, 2)]
a$var <- rownames(a)
impresult <- merge(impresult, a, by = 'var')
# varImpPlot(rf, n.var = 20, main = 'Variable importance, Random Forest')
fold.test$pred2 <- predict(rf, fold.test, type = 'prob')
rocobj1 <- plot.roc(fold.test$rrt,
fold.test$pred2[, 2],
percent=TRUE,ci=TRUE,col="#1c61b6",
print.auc=TRUE)
pred3 <- predict(rf, fold.test, type = 'prob')
z <- table(predict(rf, fold.test), fold.test$rrt)
q <- sum(diag(z))/sum(z)
aucsum <- aucsum + rocobj1$auc
}
auc.rt <- aucsum/10
impresult$meanAccuracy <- rowMeans(as.matrix(impresult[, c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)], na.rm = FALSE, dims = 1))
impresult$meanGini <- rowMeans(as.matrix(impresult[, c(3, 5, 7, 9, 11, 13, 15, 17, 19, 21)], na.rm = FALSE, dims = 1))
impresult <- impresult[order(impresult$meanAccuracy, decreasing = T), ]
a <- impresult[1:20, ]
a[, 1]
impresult <- impresult[order(impresult$meanAccuracy, decreasing = T), ]
a <- impresult[1:20, ]
row.names(a) <- c('GFR after DR', 'creatinine after DR', 'SPO2 at admission', 'GFR at admission', 'BUN after DR', 'SPO2 after DR', 'albumin after DR', 'BUN at admission', 'albumin at admission', 'potassium after DR', 'age', 'DBP after DR', 'heart rate at admission', 'potassium at admission', 'DBP at admission', 'sodium after DR', 'ACEI', 'heart rate after DR', 'hyperlipidemia', 'sodium at admission')
ggplot(data = a, mapping = aes(x = reorder(row.names(a), meanAccuracy), y = meanAccuracy)) +
geom_bar(stat= 'identity') +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1), plot.margin = unit(c(1,1,1,1),"cm")) +
xlab('variable') +
ylab('Variable importance(Accuracy)')
impresult <- impresult[order(impresult$meanGini, decreasing = T), ]
a <- impresult[1:20, ]
a[, 1]
impresult <- impresult[order(impresult$meanGini, decreasing = T), ]
a <- impresult[1:20, ]
row.names(a) <- c('creatinine after DR', 'GFR after DR', 'BUN after DR', 'SPO2 at admission', 'GFR at admission', 'albumin after DR', 'SPO2 after DR', 'albumin at admission', 'BUN at admission', 'potassium after DR', 'DBP after DR', 'age', 'potassium at admission', 'hemoglobin at admission', 'heart rate after DR', 'heart rate at admission', 'DBP at admission', 'sodium after DR', 'PH at admission', 'sodium at admission')
ggplot(data = a, mapping = aes(x = reorder(row.names(a), meanGini), y = meanGini)) +
geom_bar(stat= 'identity') +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1), plot.margin = unit(c(1,1,1,1),"cm")) +
xlab('variable') +
ylab('Variable importance(Gini)')
impresult <- impresult[order(impresult$meanAccuracy, decreasing = T), ]
a <- impresult[1:20, ]
row.names(a) <- c('GFR after DR', 'creatinine after DR', 'SPO2 at admission', 'GFR at admission', 'BUN after DR', 'SPO2 after DR', 'albumin after DR', 'BUN at admission', 'albumin at admission', 'potassium after DR', 'age', 'DBP after DR', 'heart rate at admission', 'potassium at admission', 'DBP at admission', 'sodium after DR', 'ACEI', 'heart rate after DR', 'hyperlipidemia', 'sodium at admission')
ggplot(data = a, mapping = aes(x = reorder(row.names(a), meanAccuracy), y = meanAccuracy)) +
geom_bar(stat= 'identity') +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1), plot.margin = unit(c(1,1,1,1),"cm")) +
xlab('variable') +
ylab('Variable importance(Accuracy)')
library(randomForest)
library(pROC)
library(ROCR)
library(dplyr)
data.rf <- train.data[, names(train.data) %in% c('age', 'spo2_adm', 'acei', 'hyperlipidemia', 'creatinine_dr', 'gfr_dr', 'albumin_dr', 'rrt')]
data.rf$rrt <- as.factor(data.rf$rrt)
# use 10-fold
library(caret)
set.seed(7)
folds <- createFolds(y = data.rf$rrt, k=10)
aucsum <- 0
impresult <- as.data.frame(colnames(train.data))
colnames(impresult) <- 'var'
impresult$var <- as.character(impresult$var)
for (i in 1:10){
fold.test <- data.rf[folds[[i]], ]
fold.train <- data.rf[-folds[[i]], ]
rf <- randomForest(rrt ~ .
, data = fold.train, ntree=200, proximity=TRUE,importance=TRUE)
# variable importance
a <- as.data.frame(importance(rf))[, -c(1, 2)]
a$var <- rownames(a)
impresult <- merge(impresult, a, by = 'var')
varImpPlot(rf, main = 'Variable importance, Random Forest')
fold.test$pred2 <- predict(rf, fold.test, type = 'prob')
rocobj1 <- plot.roc(fold.test$rrt,
fold.test$pred2[, 2],
percent=TRUE,ci=TRUE,col="#1c61b6",
print.auc=TRUE)
pred3 <- predict(rf, fold.test, type = 'prob')
z <- table(predict(rf, fold.test), fold.test$rrt)
q <- sum(diag(z))/sum(z)
aucsum <- aucsum + rocobj1$auc
}
auc.rt <- aucsum/10
data.rf <- train.data[, names(train.data) %in% c('age', 'spo2_adm', 'acei', 'hyperlipidemia', 'creatinine_dr', 'gfr_dr', 'albumin_dr', 'rrt')]
data.rf$rrt <- as.factor(data.rf$rrt)
rf <- randomForest(rrt ~ .
, data = data.rf, ntree=150, proximity=TRUE,importance=TRUE)
valid.rf <- valid.data[, names(valid.data) %in% c('age', 'spo2_adm', 'acei', 'hyperlipidemia', 'creatinine_dr', 'gfr_dr', 'albumin_dr', 'rrt')]
valid.rf$rrt <- as.factor(valid.rf$rrt)
valid.rf$pred2 <- predict(rf, valid.rf, type = 'prob')
rocobj1 <- plot.roc(valid.rf$rrt,
valid.rf$pred2[, 2],
percent=TRUE,ci=
impresult$meanAccuracy <- rowMeans(as.matrix(impresult[, c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)], na.rm = FALSE, dims = 1))
impresult$meanGini <- rowMeans(as.matrix(impresult[, c(3, 5, 7, 9, 11, 13, 15, 17, 19, 21)], na.rm = FALSE, dims = 1))
impresult$meanAccuracy <- rowMeans(as.matrix(impresult[, c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)], na.rm = FALSE, dims = 1))
impresult$meanGini <- rowMeans(as.matrix(impresult[, c(3, 5, 7, 9, 11, 13, 15, 17, 19, 21)], na.rm = FALSE, dims = 1))
impresult <- impresult[order(impresult$meanAccuracy, decreasing = T), ]
a <- impresult
row.names(a) <- c('GFR after DR', 'creatinine after DR', 'SPO2 at admission', 'age', 'albumin after DR', 'hyperlipidemia', 'ACEI')
ggplot(data = a, mapping = aes(x = reorder(row.names(a), meanAccuracy), y = meanAccuracy)) +
geom_bar(stat= 'identity') +
theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1), plot.margin = unit(c(1,1,1,1),"cm")) +
xlab('variable') +
ylab('Variable importance(Accuracy)')
impresult <- impresult[order(impresult$meanGini, decreasing = T), ]
a <- impresult
row.names(a) <- c('GFR after DR', 'creatinine after DR', 'SPO2 at admission', 'albumin after DR', 'age', 'ACEI', 'hyperlipidemia')
ggplot(data = a, mapping = aes(x = reorder(row.names(a), meanGini), y = meanGini)) +
geom_bar(stat= 'identity') +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1), plot.margin = unit(c(1,1,1,1),"cm")) +
xlab('variable') +
ylab('Variable importance(Gini)')
